{"/home/travis/build/npmtest/node-npmtest-xbee-api/test.js":"/* istanbul instrument in package npmtest_xbee_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xbee-api/lib.npmtest_xbee_api.js":"/* istanbul instrument in package npmtest_xbee_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_xbee_api = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_xbee_api = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-xbee-api/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-xbee-api && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_xbee_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_xbee_api\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_xbee_api.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_xbee_api.rollup.js'] =\n            local.assetsDict['/assets.npmtest_xbee_api.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_xbee_api.__dirname + '/lib.npmtest_xbee_api.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xbee-api/node_modules/xbee-api/lib/xbee-api.js":"/*\n * xbee-api\n * https://github.com/jouz/xbee-api\n *\n * Copyright (c) 2013 Jan Kolkmeier\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar util = require('util'),\n    assert = require('assert'),\n    events = require('events'),\n    Buffer = require('safe-buffer').Buffer,\n    BufferBuilder = require('buffer-builder'),\n    BufferReader = require('buffer-reader');\n\nexports = module.exports;\n\nvar C       = exports.constants = require('./constants.js');\nvar frame_parser = exports._frame_parser = require('./frame-parser');\nvar frame_builder = exports._frame_builder = require('./frame-builder');\n\nvar _options = {\n  raw_frames: false,\n  api_mode: 1,\n  module: \"Any\",\n  convert_adc: true,\n  vref_adc: 1200,\n};\n\nfunction XBeeAPI(options) {\n  events.EventEmitter.call(this);\n  options = options || {};\n  options.__proto__ = _options;\n  this.options = options;\n\n  this.parseState = {\n    buffer: Buffer.alloc(128),\n    offset: 0,         // Offset in buffer\n    length: 0,         // Packet Length\n    total: 0,          // To test Checksum\n    checksum: 0x00,    // Checksum byte\n    b: 0x00,           // Working byte\n    escape_next: false,// For escaping in AP=2\n    waiting: true\n  };\n\n  return this;\n}\nutil.inherits(XBeeAPI, events.EventEmitter);\n\nexports.XBeeAPI = XBeeAPI;\n\nXBeeAPI.prototype.escape = function(buffer) {\n  if (this.escapeBuffer === undefined)\n    this.escapeBuffer = Buffer.alloc(512);\n\n  var offset = 0;\n  this.escapeBuffer.writeUInt8(buffer[0], offset++);\n  for (var i = 1; i < buffer.length; i++) {\n    if (C.ESCAPE_BYTES.indexOf(buffer[i]) > -1) {\n      this.escapeBuffer.writeUInt8(C.ESCAPE, offset++);\n      this.escapeBuffer.writeUInt8(buffer[i] ^ C.ESCAPE_WITH, offset++);\n    } else {\n      this.escapeBuffer.writeUInt8(buffer[i], offset++);\n    }\n  }\n\n  return Buffer.from(this.escapeBuffer.slice(0, offset));\n};\n\nXBeeAPI.prototype.buildFrame = function(frame) {\n  assert(frame, 'Frame parameter must be a frame object');\n\n  var packet = Buffer.alloc(256); // Packet buffer\n  var payload = packet.slice(3); // Reference the buffer past the header\n  var builder = new BufferBuilder(payload);\n\n  if(!frame_builder[frame.type])\n    throw new Error('This library does not implement building the %d frame type.', frame.type);\n\n  // Let the builder fill the payload\n  frame_builder[frame.type](frame, builder);\n\n  // Calculate & Append Checksum\n  var checksum = 0;\n  for (var i = 0; i < builder.length; i++) checksum += payload[i];\n  builder.appendUInt8(255 - (checksum % 256));\n  \n  // Get just the payload\n  payload = payload.slice(0, builder.length);\n\n  // Build the header at the start of the packet buffer\n  builder = new BufferBuilder(packet);\n  builder.appendUInt8(C.START_BYTE);\n  builder.appendUInt16BE(payload.length - 1); // Sans checksum\n\n  // Get the header and payload as one contiguous buffer\n  packet = packet.slice(0, builder.length + payload.length);\n\n  // Escape the packet, if needed\n  return this.options.api_mode === 2 ? this.escape(packet) : packet;\n};\n\n// Note that this expects the whole frame to be escaped!\nXBeeAPI.prototype.parseFrame = function(rawFrame) {\n  // Trim the header and trailing checksum\n  var reader = new BufferReader(rawFrame.slice(3, rawFrame.length -1));\n\n  var frame = {\n    type: reader.nextUInt8() // Read Frame Type\n  };\n\n  // Frame type specific parsing.\n  frame_parser[frame.type](frame, reader, this.options);\n\n  return frame;\n};\n\nXBeeAPI.prototype.canParse = function(buffer) {\n  var type = buffer.readUInt8(3);\n  return type in frame_parser;\n};\n\nXBeeAPI.prototype.canBuild = function(type) {\n  return type in frame_builder;\n};\n\nXBeeAPI.prototype.nextFrameId = function() {\n  return frame_builder.nextFrameId();\n};\n\nXBeeAPI.prototype.rawParser = function() {\n  return function(emitter, buffer) {\n    this.parseRaw(buffer);\n  }.bind(this);\n};\n\nXBeeAPI.prototype.parseRaw = function(buffer) {\n  var S = this.parseState;\n  for(var i = 0; i < buffer.length; i++) {\n    S.b = buffer[i];\n    if (S.b === C.START_BYTE) {\n      S.buffer = Buffer.alloc(128);\n      S.length = 0;\n      S.total = 0;\n      S.checksum = 0x00;\n      S.offset = 0;\n      S.escape_next = false;\n      S.waiting = false;\n    }\n\n    if (this.options.api_mode === 2 && S.b === C.ESCAPE) {\n      S.escape_next = true;\n      continue;\n    }\n\n    if (S.escape_next) {\n      S.b = 0x20 ^ S.b;\n      S.escape_next = false;\n    }\n\n    if (!S.waiting) {\n        if (S.buffer.length > S.offset) {\n          S.buffer.writeUInt8(S.b, S.offset++);\n        } else {\n            console.log(\"We would have a problem...\");\n            S.waiting = true;\n        }\n    }\n    \n    if (S.offset === 1) {\n      continue;\n    }\n\n    if (S.offset === 2) {\n      S.length  = S.b << 8; // most sign. bit of the length\n      continue;\n    }\n    if (S.offset === 3) {\n      S.length += S.b;     // least sign. bit of the length\n      continue;\n    }\n\n    if (S.offset > 3) { // unnessary check\n      if (S.offset < S.length+4) {\n        S.total += S.b;\n        continue;\n      } else {\n        S.checksum = S.b;\n      }\n    }\n\n    if (S.length > 0 && S.offset === S.length + 4) {\n      if (S.checksum !== (255 - (S.total % 256))) {\n        var err = new Error(\"Checksum Mismatch \" + JSON.stringify(S));\n        this.emit('error', err);\n      }\n\n      var rawFrame = S.buffer.slice(0, S.offset);\n      if (this.options.raw_frames || !this.canParse(rawFrame)) {\n        this.emit(\"frame_raw\", rawFrame);\n      } else {\n        var frame = this.parseFrame(rawFrame);\n        this.emit(\"frame_object\", frame);\n      }\n\n      // Reset some things so we don't try to reeimt the same package if there is more (bogus?) data\n      S.waiting = true;\n      S.length = 0;\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-xbee-api/node_modules/xbee-api/lib/constants.js":"/*\n * xbee-api\n * https://github.com/jouz/xbee-api\n *\n * Copyright (c) 2013 Jan Kolkmeier\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nexports = module.exports;\n\nexports.START_BYTE = 0x7E;\nexports.ESCAPE = 0x7D;\nexports.XOFF = 0x13;\nexports.XON = 0x11;\nexports.ESCAPE_WITH = 0x20;\n\nexports.UNKNOWN_16     = [ 0xff, 0xfe ];\nexports.UNKNOWN_64     = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff ];\nexports.BROADCAST_16_XB= [ 0xff, 0xff ];\nexports.COORDINATOR_16 = [ 0x00, 0x00 ];\nexports.COORDINATOR_64 = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ];\n\nexports.ESCAPE_BYTES = [ \n  exports.START_BYTE,\n  exports.ESCAPE,\n  exports.XOFF,\n  exports.XON\n];\n\nvar ft = exports.FRAME_TYPE = {};\nvar diss = exports.DISCOVERY_STATUS = {};\nvar dels = exports.DELIVERY_STATUS = {};\nvar coms = exports.COMMAND_STATUS = {};\nvar ms = exports.MODEM_STATUS = {};\nvar ro = exports.RECEIVE_OPTIONS = {};\nvar dt = exports.DEVICE_TYPE = {};\n\nvar dc = exports.DIGITAL_CHANNELS = { MASK: {}, PIN:{} };\nvar ac = exports.ANALOG_CHANNELS = { MASK: {}, PIN:{} };\nvar pr = exports.PULLUP_RESISTOR = { MASK: {}, PIN:{} };\nvar ic = exports.CHANGE_DETECTION = { MASK: {}, PIN:{} };\nvar pm = exports.PIN_MODE = {};\nvar pc = exports.PIN_COMMAND = { PIN:{} };\n\nexports.FRAME_TYPE_SETS = {\n  \"802.15.4\": [0x00,0x01,0x08,0x09,0x17,0x80,0x81,0x82,0x83,0x88,0x89,0x8A,0x97],\n  \"ZNet\": [0x08,0x09,0x10,0x11,0x17,0x88,0x8A,0x8B,0x90,0x91,0x92,0x94,0x95,0x97],\n  \"ZigBee\": [0x08,0x09,0x10,0x11,0x17,0x21,0x24,0x88,0x8A,0x8B,0x90,0x91,0x92,0x94,0x95,0x97,0xA0,0xA1,0xA2,0xA3,0xA4,0xA5],\n  \"Any\": [0x00,0x01,0x08,0x09,0x17,0x80,0x81,0x82,0x83,0x88,0x89,0x8a,0x97,0x10,0x11,0x8b,0x90,0x91,0x92,0x94,0x95,0x21,0x24,0xa0,0xa1,0xa2,0xa3,0xa4,0xa5]\n};\n\n// Device Type\ndt.COORDINATOR = 0x00;\ndt[0x00] = \"Coordinator (0x00)\";\ndt.ROUTER = 0x01;\ndt[0x01] = \"Router (0x01)\";\ndt.END_DEVICE = 0x02;\ndt[0x02] = \"End Device (0x02)\";\n\n// Frame Type\nft.AT_COMMAND = 0x08;\nft[0x08] = \"AT Command (0x08)\";\nft.AT_COMMAND_QUEUE_PARAMETER_VALUE = 0x09;\nft[0x09] = \"AT Command - Queue Parameter Value (0x09)\";\nft.ZIGBEE_TRANSMIT_REQUEST = 0x10;\nft[0x10] = \"ZigBee Transmit Request (0x10)\";\nft.EXPLICIT_ADDRESSING_ZIGBEE_COMMAND_FRAME = 0x11;\nft[0x11] = \"Explicit Addressing ZigBee Command Frame (0x11)\";\nft.REMOTE_AT_COMMAND_REQUEST = 0x17;\nft[0x17] = \"Remote Command Request (0x17)\";\nft.CREATE_SOURCE_ROUTE = 0x21;\nft[0x21] = \"Create Source Route (0x21)\";\nft.REGISTER_JOINING_DEVICE = 0x24;\nft[0x24] = \"Register Joining Device (0x24)\";\nft.AT_COMMAND_RESPONSE = 0x88;\nft[0x88] = \"AT Command Response (0x88)\";\nft.MODEM_STATUS = 0x8A;\nft[0x8A] = \"Modem Status (0x8A)\";\nft.ZIGBEE_TRANSMIT_STATUS = 0x8B;\nft[0x8B] = \"ZigBee Transmit Status (0x8B)\";\nft.ZIGBEE_RECEIVE_PACKET = 0x90;\nft[0x90] = \"ZigBee Receive Packet (AO=0) (0x90)\";\nft.ZIGBEE_EXPLICIT_RX = 0x91;\nft[0x91] = \"ZigBee Explicit Rx Indicator (AO=1) (0x91)\";\nft.ZIGBEE_IO_DATA_SAMPLE_RX = 0x92;\nft[0x92] = \"ZigBee IO Data Sample Rx Indicator (0x92)\";\nft.XBEE_SENSOR_READ = 0x94;\nft[0x94] = \"XBee Sensor Read Indicator (AO=0) (0x94)\";\nft.NODE_IDENTIFICATION = 0x95;\nft[0x95] = \"Node Identification Indicator (AO=0) (0x95)\";\nft.REMOTE_COMMAND_RESPONSE = 0x97;\nft[0x97] = \"Remote Command Response (0x97)\";\nft.OTA_FIRMWARE_UPDATE_STATUS = 0xA0;\nft[0xA0] = \"Over-the-Air Firmware Update Status (0xA0)\";\nft.ROUTE_RECORD = 0xA1;\nft[0xA1] = \"Route Record Indicator (0xA1)\";\nft.DEVICE_AUTHENITCATED_INDICATOR = 0xA2;\nft[0xA2] = \"Device Authenticated Indicator (0xA2)\";\nft.MTO_ROUTE_REQUEST = 0xA3;\nft[0xA3] = \"Many-to-One Route Request Indicator (0xA3)\";\nft.REGISTER_JOINING_DEVICE_STATUS = 0xA4;\nft[0xA4] = \"Register Joining Device Status (0xA4)\";\nft.JOIN_NOTIFICATION_STATUS = 0xA5;\nft[0xA5] = \"Join Notification Status (0xA5)\";\n\n// Series 1/802.15.4 Support\nft.TX_REQUEST_64 = 0x00;\nft[0x00] = \"TX (Transmit) Request: 64-bit address (0x00)\";\nft.TX_REQUEST_16 = 0x01;\nft[0x01] = \"TX (Transmit) Request: 16-bit address (0x01)\";\nft.TX_STATUS = 0x89;\nft[0x89] = \"TX (Transmit) Status (0x89)\";\nft.RX_PACKET_64 = 0x80;\nft[0x80] = \"RX (Receive) Packet: 64-bit Address (0x80)\";\nft.RX_PACKET_16 = 0x81;\nft[0x81] = \"RX (Receive) Packet: 16-bit Address (0x81)\";\nft.RX_PACKET_64_IO = 0x82;\nft[0x82] = \"RX (Receive) Packet: 64-bit Address IO (0x82)\";\nft.RX_PACKET_16_IO = 0x83;\nft[0x83] = \"RX (Receive) Packet: 16-bit Address IO (0x83)\";\n\n\n// Modem Status\nms.HARDWARE_RESET = 0x00;\nms[0x00] = \"Hardware Reset (0x00)\";\nms.WATCHDOG_RESET = 0x01;\nms[0x01] = \"Watchdog timer reset (0x01)\";\nms.JOINED_NETWORK = 0x02;\nms[0x02] = \"Joined Network (0x02)\";\nms.DISASSOCIATED = 0x03;\nms[0x03] = \"Disassociated (0x03)\";\nms.COORDINATOR_STARTED = 0x06;\nms[0x06] = \"Coordinator started (0x06)\";\nms.SECURITY_KEY_UPDATED = 0x07;\nms[0x07] = \"Network security key was updated (0x07)\";\nms.VOLTAGE_SUPPLY_LIMIT_EXCEEDED = 0x0D;\nms[0x0D] = \"Voltage supply limit exceeded (0x0D)\";\nms.CONFIGURATION_CHANGED_DURING_JOIN = 0x11;\nms[0x11] = \"Modem Configuration changed while join in progress (0x11)\";\nms.STACK_ERROR = 0x80;\nms[0x80] = \"Stack Error (0x80)\";\n\n// Command Status\ncoms.OK = 0x00;\ncoms[0x00] = \"OK (0x00)\";\ncoms.ERROR = 0x01;\ncoms[0x01] = \"ERROR (0x01)\";\ncoms.INVALID_COMMAND = 0x02;\ncoms[0x02] = \"Invalid Command (0x02)\";\ncoms.INVALID_PARAMETER = 0x03;\ncoms[0x03] = \"Invalid Parameter (0x03)\";\ncoms.REMOTE_CMD_TRANS_FAILURE = 0x04;\ncoms[0x04] = \"Remote Command Transmission Failed (0x04)\";\n\n// Delivery Status\ndels.SUCCESS = 0x00;\ndels[0x00] = \"Success (0x00)\";\ndels.MAC_ACK_FALIURE = 0x01;\ndels[0x01] = \"MAC ACK Failure (0x01)\";\ndels.CA_FAILURE = 0x02;\ndels[0x02] = \"CA Failure (0x02)\";\ndels.INVALID_DESTINATION_ENDPOINT = 0x15;\ndels[0x15] = \"Invalid destination endpoint (0x15)\";\ndels.NETWORK_ACK_FAILURE = 0x21;\ndels[0x21] = \"Network ACK Failure (0x21)\";\ndels.NOT_JOINED_TO_NETWORK = 0x22;\ndels[0x22] = \"Not Joined to Network (0x22)\";\ndels.SELF_ADDRESSED = 0x23;\ndels[0x23] = \"Self-addressed (0x23)\";\ndels.ADDRESS_NOT_FOUND = 0x24;\ndels[0x24] = \"Address Not Found (0x24)\";\ndels.ROUTE_NOT_FOUND = 0x25;\ndels[0x25] = \"Route Not Found (0x25)\";\ndels.BROADCAST_SOURCE_FAILED = 0x26;\ndels[0x26] = \"Broadcast source failed to hear a neighbor relay the message (0x26)\";\ndels.INVALID_BINDING_TABLE_INDEX = 0x2B;\ndels[0x2B] = \"Invalid binding table index (0x2B)\";\ndels.RESOURCE_ERROR = 0x2C;\ndels[0x2C] = \"Resource error lack of free buffers, timers, etc. (0x2C)\";\ndels.ATTEMPTED_BROADCAST_WITH_APS_TRANS = 0x2D;\ndels[0x2D] = \"Attempted broadcast with APS transmission (0x2D)\";\ndels.ATTEMPTED_BROADCAST_WITH_APS_TRANS_EE0 = 0x2D;\ndels[0x2E] = \"Attempted unicast with APS transmission, but EE=0 (0x2E)\";\ndels.RESOURCE_ERROR_B = 0x32;\ndels[0x32] = \"Resource error lack of free buffers, timers, etc. (0x32)\";\ndels.DATA_PAYLOAD_TOO_LARGE = 0x74;\ndels[0x74] = \"Data payload too large (0x74)\";\ndels.INDIRECT_MESSAGE_UNREQUESTED = 0x75;\ndels[0x75] = \"Indirect message unrequested (0x75)\";\n\n// Discovery Status\ndiss.NO_DISCOVERY_OVERHEAD = 0x00;\ndiss[0x00] = \"No Discovery Overhead (0x00)\";\ndiss.ADDRESS_DISCOVERY = 0x01;\ndiss[0x01] = \"Address Discovery (0x01)\";\ndiss.ROUTE_DISCOVERY = 0x02;\ndiss[0x02] = \"Route Discovery (0x02)\";\ndiss.ADDRESS_AND_ROUTE_DISCOVERY = 0x03;\ndiss[0x03] = \"Address and Route (0x03)\";\ndiss.EXTENDED_TIMEOUT_DISCOVERY = 0x40;\ndiss[0x40] = \"Extended Timeout Discovery (0x40)\";\n\n// Receive Options\nro.PACKET_ACKNOWLEDGED = 0x01;\nro[0x01] = \"Packet Acknowledged (0x01)\";\nro.PACKET_WAS_BROADCAST = 0x02;\nro[0x02] = \"Packet was a broadcast packet (0x02)\";\nro.PACKET_ENCRYPTED = 0x20;\nro[0x20] = \"Packet encrypted with APS encryption (0x20)\";\nro.PACKET_SENT_FROM_END_DEVICE = 0x40;\nro[0x40] = \"Packet was sent from an end device (if known) (0x40)\";\n\n\n\n//\n// Digital Channel Mask/Pins\n//\n// Map mask to name\ndc.MASK[0]  = [\"DIO0\", \"AD0\"];\ndc.MASK[1]  = [\"DIO1\", \"AD1\"];\ndc.MASK[2]  = [\"DIO2\", \"AD2\"];\ndc.MASK[3]  = [\"DIO3\", \"AD3\"]; \ndc.MASK[4]  = [\"DIO4\"]; \ndc.MASK[5]  = [\"DIO5\", \"ASSOCIATE\"];\ndc.MASK[6]  = [\"DIO6\", \"RTS\"]; \ndc.MASK[7]  = [\"DIO7\", \"CTS\"];\ndc.MASK[10] = [\"DIO10\", \"RSSI\"]; \ndc.MASK[11] = [\"DIO11\", \"PWM\"]; \ndc.MASK[12] = [\"DIO12\", \"CD\"]; \n// Map pin/name to mask\nac.PIN[20] = dc.DIO0 = dc.AD0 = 0;\nac.PIN[19] = dc.DIO1 = dc.AD1 = 1;\nac.PIN[18] = dc.DIO2 = dc.AD2 = 2;\nac.PIN[17] = dc.DIO3 = dc.AD3 = 3;\nac.PIN[11] = dc.DIO4 = 4;\nac.PIN[15] = dc.DIO5 = dc.ASSOCIATE = 5;\nac.PIN[16] = dc.DIO6 = dc.RTS = 6;\nac.PIN[12] = dc.DIO7 = dc.CTS = 7;\nac.PIN[6]  = dc.DIO10 = dc.RSSI = 10;\nac.PIN[7]  = dc.DIO11 = dc.PWM = 11;\nac.PIN[4]  = dc.DIO12 = dc.CD = 12;\n\n//\n// Analog Channel Mask/Pins\n//\n// Map mask to name\nac.MASK[0] = [\"AD0\", \"DIO0\" ];\nac.MASK[1] = [\"AD1\", \"DIO1\" ];\nac.MASK[2] = [\"AD2\", \"DIO2\" ];\nac.MASK[3] = [\"AD3\", \"DIO3\" ];\nac.MASK[7] = [\"SUPPLY\"];\n// map pin/name to mask\nac.PIN[20] = ac.AD0 = ac.DIO0 = 0;\nac.PIN[19] = ac.AD1 = ac.DIO1 = 1;\nac.PIN[18] = ac.AD2 = ac.AD3 = 3;\nac.PIN[17] = ac.SUPPLY = 7; // 17 True?\n\n\n//\n// Pullup-enable Mask/Pins\n//\n// Map mask to name\npr.MASK[0] = [\"DIO4\"];\npr.MASK[1] = [\"DIO3\", \"AD3\"];\npr.MASK[2] = [\"DIO2\", \"AD2\"];\npr.MASK[3] = [\"DIO1\", \"AD1\"];\npr.MASK[4] = [\"DIO0\", \"AD0\"];\npr.MASK[5] = [\"DIO6\", \"RTS\"];\npr.MASK[6] = [\"DIO8\", \"DTR\", \"SLEEP_REQUEST\"];\npr.MASK[7] = [\"DIN\", \"CONFIG\"];\npr.MASK[8] = [\"DIO5\", \"ASSOCIATE\"];\npr.MASK[9] = [\"DIO9\", \"ON\"];\npr.MASK[10] = [\"DIO12\"];\npr.MASK[11] = [\"DIO10\", \"RSSI\", \"PWM0\"];\npr.MASK[12] = [\"DIO11\", \"PWM1\"];\npr.MASK[13] = [\"DIO7\", \"CTS\"];\n// Map pin/name to maks\npr.PIN[11] = pr.DIO4 = 0;\npr.PIN[17] = pr.AD3 = pr.DIO3 = 1; \npr.PIN[18] = pr.AD2 = pr.DIO2 = 2;\npr.PIN[19] = pr.AD1 = pr.DIO1 = 3;\npr.PIN[20] = pr.AD0 = pr.DIO0 = 4;\npr.PIN[16] = pr.RTS = pr.DIO6 = 5;\npr.PIN[9] = pr.DIO8 = pr.DTR  = pr.SLEEP_REQUEST = 6;\npr.PIN[3] = pr.DIN  = pr.CONFIG = 7;\npr.PIN[15] = pr.ASSOCIATE = pr.DIO5 = 8;\npr.PIN[13] = pr.ON = pr.SLEEP = pr.DIO9 = 9;\npr.PIN[4] = pr.DIO12 = 10;\npr.PIN[6] = pr.PWM0 = pr.RSSI = pr.DIO10 = 11;\npr.PIN[7] = pr.PWM1 = pr.DIO11 = 12;\npr.PIN[12] = pr.CTS = pr.DIO7 = 13;\n\n\n//\n// Change Reporting Mask/Pins\n//\n// Map mask to name\nic.MASK[0] = [\"DIO0\"];\nic.MASK[1] = [\"DIO1\"];\nic.MASK[2] = [\"DIO2\"];\nic.MASK[3] = [\"DIO3\"]; \nic.MASK[4] = [\"DIO4\"]; \nic.MASK[5] = [\"DIO5\"]; \nic.MASK[6] = [\"DIO6\"]; \nic.MASK[7] = [\"DIO7\"]; \nic.MASK[8] = [\"DIO8\"]; \nic.MASK[9] = [\"DIO9\"]; \nic.MASK[10] = [\"DIO10\"]; \nic.MASK[11] = [\"DIO11\"]; \n// Map pin/name to mask\nic.PIN[20] = ic.DIO0 = 0;\nic.PIN[19] = ic.DIO1 = 1;\nic.PIN[18] = ic.DIO2 = 2;\nic.PIN[17] = ic.DIO3 = 3;\nic.PIN[11] = ic.DIO4 = 4;\nic.PIN[15] = ic.DIO5 = 5;\nic.PIN[16] = ic.DIO6 = 6;\nic.PIN[12] = ic.DIO7 = 7;\nic.PIN[9]  = ic.DIO8 = 8;\nic.PIN[13] = ic.DIO9 = 9;\nic.PIN[6]  = ic.DIO10 = 10;\nic.PIN[7]  = ic.DIO11 = 11;\n\n\n// \n// Pin Modes\n//\npm.P2 = pm.P1 = {\n  UNMONITORED_INPUT: 0x00,\n  DIGITAL_INPUT: 0x03,\n  DIGITAL_OUTPUT_LOW: 0x04,\n  DIGITAL_OUTPUT_HIGH: 0x05\n};\n\npm.P0 = {\n  DISABLED: 0x00,\n  RSSI_PWM: 0x01,\n  DIGITAL_INPUT: 0x03,\n  DIGITAL_OUTPUT_LOW: 0x04,\n  DIGITAL_OUTPUT_HIGH: 0x05\n};\n\npm.D4 = {\n  DISABLED: 0x00,\n  DIGITAL_INPUT: 0x03,\n  DIGITAL_OUTPUT_LOW: 0x04,\n  DIGITAL_OUTPUT_HIGH: 0x05\n};\n\npm.D7 = {\n  DISABLED: 0x00,\n  CTS_FLOW_CTRL: 0x01,\n  DIGITAL_INPUT: 0x03,\n  DIGITAL_OUTPUT_LOW: 0x04,\n  DIGITAL_OUTPUT_HIGH: 0x05,\n  RS485_TX_LOW: 0x06,\n  RS485_TX_HIGH: 0x07\n};\n\npm.D5 = {\n  DISABLED: 0x00,\n  ASSOC_LED: 0x01,\n  DIGITAL_INPUT: 0x03,\n  DIGITAL_OUTPUT_LOW: 0x04,\n  DIGITAL_OUTPUT_HIGH: 0x05\n};\n\npm.D6 = {\n  DISABLED: 0x00,\n  RTS_FLOW_CTRL: 0x01,\n  DIGITAL_INPUT: 0x03,\n  DIGITAL_OUTPUT_LOW: 0x04,\n  DIGITAL_OUTPUT_HIGH: 0x05\n};\n\npm.D0 = pm.D1 = pm.D2 = pm.D3 = {\n  DISABLED: 0x00,\n  NODE_ID_ENABLED: 0x01, // Only valid for D0!\n  ANALOG_INPUT: 0x02,\n  DIGITAL_INPUT: 0x03,\n  DIGITAL_OUTPUT_LOW: 0x04,\n  DIGITAL_OUTPUT_HIGH: 0x05\n};\n\nfor (var pin in pm) {\n  for (var key in pm[pin]) {\n    pm[pin][pm[pin][key]] = key;\n  }\n}\n\npc.PIN[6] = pc.PWM0 = pc.DIO10 = pc.RSSIM = \"P0\";\npc.PIN[7] = pc.DIO11 = pc.PWM1 = \"P1\";\npc.PIN[4] = pc.DIO12 = \"P2\";\npc.PIN[12] = pc.DIO7 = pc.CTS = \"D7\";\npc.PIN[16] = pc.DIO6 = \"D6\";\npc.PIN[20] = pc.AD0 = pc.DIO0 = \"D0\";\npc.PIN[19] = pc.AD1 = pc.DIO1 = \"D1\";\npc.PIN[18] = pc.AD2 = pc.DIO2 = \"D2\";\npc.PIN[17] = pc.AD3 = pc.DIO3 = \"D3\";\npc.PIN[11] = pc.DIO4 = \"D4\";\npc.PIN[15] = pc.DIO5 = pc.ASSOC = \"D5\";\n\n","/home/travis/build/npmtest/node-npmtest-xbee-api/node_modules/xbee-api/lib/frame-parser.js":"/*\n * xbee-api\n * https://github.com/jouz/xbee-api\n *\n * Copyright (c) 2013 Jan Kolkmeier\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar C = require('./constants.js');\n\nvar frame_parser = module.exports = {};\n\nframe_parser[C.FRAME_TYPE.NODE_IDENTIFICATION] = function(frame, reader, options) {\n  frame.sender64 = reader.nextString(8, 'hex');\n  frame.sender16 = reader.nextString(2, 'hex');\n  frame.receiveOptions = reader.nextUInt8();\n  frame_parser.parseNodeIdentificationPayload(frame, reader, options);\n};\n\nframe_parser[C.FRAME_TYPE.ZIGBEE_RECEIVE_PACKET] = function(frame, reader, options) {\n  frame.remote64 = reader.nextString(8, 'hex');\n  frame.remote16 = reader.nextString(2, 'hex');\n  frame.receiveOptions = reader.nextUInt8();\n  frame.data = reader.nextAll();\n};\n\nframe_parser[C.FRAME_TYPE.ZIGBEE_EXPLICIT_RX] = function(frame, reader, options) {\n  frame.remote64 = reader.nextString(8, 'hex');\n  frame.remote16 = reader.nextString(2, 'hex');\n  frame.sourceEndpoint = reader.nextString(1, 'hex');\n  frame.destinationEndpoint = reader.nextString(1, 'hex');\n  frame.clusterId = reader.nextString(2, 'hex');\n  frame.profileId = reader.nextString(2, 'hex');\n  frame.receiveOptions = reader.nextUInt8();\n  frame.data = reader.nextAll();\n};\n\nframe_parser[C.FRAME_TYPE.XBEE_SENSOR_READ] = function(frame, reader, options) {\n  frame.remote64 = reader.nextString(8, 'hex');\n  frame.remote16 = reader.nextString(2, 'hex');\n  frame.receiveOptions = reader.nextUInt8();\n  frame.sensors = reader.nextUInt8();\n  frame.sensorValues = {\n      AD0: Math.round(1000 * (reader.nextUInt16BE() * 5.1) / 255.0),\n      AD1: Math.round(1000 * (reader.nextUInt16BE() * 5.1) / 255.0),\n      AD2: Math.round(1000 * (reader.nextUInt16BE() * 5.1) / 255.0),\n      AD3: Math.round(1000 * (reader.nextUInt16BE() * 5.1) / 255.0),\n      T:   reader.nextUInt16BE(),\n      temperature: undefined,\n      relativeHumidity: undefined,\n      trueHumidity: undefined,\n      waterPresent: frame.sensors === 0x60\n  };\n\n  if (frame.sensors === 2 || frame.sensors === 3) {\n    if (frame.sensorValues.T < 2048) {\n      frame.sensorValues.temperature = frame.sensorValues.T / 16;\n    } else {\n      frame.sensorValues.temperature = -(frame.sensorValues.T & 0x7ff) / 16;\n    }\n  }\n\n  if (frame.sensors === 1 || frame.sensors === 3) {\n    frame.sensorValues.relativeHumidity = Math.round(100 *\n        (((frame.sensorValues.AD3 / frame.sensorValues.AD2) -\n            0.16) / (0.0062))) / 100;\n  }\n\n  if (frame.sensors === 3) {\n    frame.sensorValues.trueHumidity = Math.round(100 *\n        (frame.sensorValues.relativeHumidity / (1.0546 -\n            (0.00216 * frame.sensorValues.temperature)))) / 100;\n  }\n\n};\n\nframe_parser[C.FRAME_TYPE.MODEM_STATUS] = function(frame, reader, options) {\n  frame.modemStatus = reader.nextUInt8();\n};\n\nframe_parser[C.FRAME_TYPE.ZIGBEE_IO_DATA_SAMPLE_RX] = function(frame, reader, options) {\n  frame.remote64 = reader.nextString(8, 'hex');\n  frame.remote16 = reader.nextString(2, 'hex');\n  frame.receiveOptions = reader.nextUInt8();\n  frame_parser.ParseIOSamplePayload(frame, reader, options);\n};\n\nframe_parser[C.FRAME_TYPE.AT_COMMAND_RESPONSE] = function(frame, reader, options) {\n  frame.id = reader.nextUInt8();\n  frame.command = reader.nextString(2, 'ascii');\n  frame.commandStatus = reader.nextUInt8();\n  if ((frame.command === \"ND\") && (frame.commandStatus == C.COMMAND_STATUS.OK) && (reader.buf.length > reader.tell())) {\n    frame.nodeIdentification = {};\n    frame_parser.parseNodeIdentificationPayload(frame.nodeIdentification, reader);\n  } else {\n    frame.commandData = reader.nextAll();\n  }\n};\n\nframe_parser[C.FRAME_TYPE.REMOTE_COMMAND_RESPONSE] = function(frame, reader, options) {\n  frame.id = reader.nextUInt8();\n  frame.remote64 = reader.nextString(8, 'hex');\n  frame.remote16 = reader.nextString(2, 'hex');\n  frame.command = reader.nextString(2, 'ascii');\n  frame.commandStatus = reader.nextUInt8();\n  if(frame.command === \"IS\") {\n    frame_parser.ParseIOSamplePayload(frame, reader, options);\n  } else if ((frame.command === \"ND\") && (frame.commandStatus == C.COMMAND_STATUS.OK)) {\n    frame.nodeIdentification = {};\n    frame_parser.parseNodeIdentificationPayload(frame.nodeIdentification, reader);\n  } else {\n    frame.commandData = reader.nextAll();\n  }\n};\n\nframe_parser[C.FRAME_TYPE.ZIGBEE_TRANSMIT_STATUS] = function(frame, reader, options) {\n  frame.id = reader.nextUInt8();\n  frame.remote16 = reader.nextString(2, 'hex');\n  frame.transmitRetryCount = reader.nextUInt8();\n  frame.deliveryStatus = reader.nextUInt8();\n  frame.discoveryStatus = reader.nextUInt8();\n};\n\nframe_parser[C.FRAME_TYPE.ROUTE_RECORD] = function(frame, reader, options) {\n  frame.remote64 = reader.nextString(8, 'hex');\n  frame.remote16 = reader.nextString(2, 'hex');\n  frame.receiveOptions = reader.nextUInt8();\n  frame.hopCount = reader.nextUInt8();\n  frame.addresses = [];\n  for (var i=0; i<frame.hopCount; i++) {\n    frame.addresses.push(reader.nextUInt16BE());\n  }\n};\n\nframe_parser[C.FRAME_TYPE.AT_COMMAND] = \nframe_parser[C.FRAME_TYPE.AT_COMMAND_QUEUE_PARAMETER_VALUE] = function(frame, reader, options) {\n  frame.id = reader.nextUInt8();\n  frame.command = reader.nextString(2, 'ascii');\n  frame.commandParameter = reader.nextAll();\n};\n\nframe_parser[C.FRAME_TYPE.REMOTE_AT_COMMAND_REQUEST] = function(frame, reader, options) {\n  frame.id = reader.nextUInt8();\n  frame.destination64 = reader.nextString(8, 'hex');\n  frame.destination16 = reader.nextString(2, 'hex');\n  frame.remoteCommandOptions = reader.nextUInt8();\n  frame.command = reader.nextString(2, 'ascii');\n  frame.commandParameter = reader.nextAll();\n};\n\nframe_parser[C.FRAME_TYPE.ZIGBEE_TRANSMIT_REQUEST] = function(frame, reader, options) {\n  frame.id = reader.nextUInt8();\n  frame.destination64 = reader.nextString(8, 'hex');\n  frame.destination16 = reader.nextString(2, 'hex');\n  frame.broadcastRadius = reader.nextUInt8();\n  frame.options = reader.nextUInt8();\n  frame.data = reader.nextAll();\n};\n\nframe_parser[C.FRAME_TYPE.EXPLICIT_ADDRESSING_ZIGBEE_COMMAND_FRAME] = function(frame, reader, options) {\n  frame.id = reader.nextUInt8();\n  frame.destination64 = reader.nextString(8, 'hex');\n  frame.destination16 = reader.nextString(2, 'hex');\n  frame.sourceEndpoint = reader.nextUInt8();\n  frame.destinationEndpoint = reader.nextUInt8();\n  frame.clusterId = reader.nextUInt16BE();\n  frame.profileId = reader.nextUInt16BE();\n  frame.broadcastRadius = reader.nextUInt8();\n  frame.options = reader.nextUInt8();\n  frame.data = reader.nextAll();\n};\n\nframe_parser[C.FRAME_TYPE.TX_REQUEST_64] = function(frame, reader, options) {\n  frame.id = reader.nextUInt8();\n  frame.destination64 = reader.nextString(8, 'hex');\n  frame.options = reader.nextUInt8();\n  frame.data = reader.nextAll();\n};\n\nframe_parser[C.FRAME_TYPE.TX_REQUEST_16] = function(frame, reader, options) {\n  frame.id = reader.nextUInt8();\n  frame.destination16 = reader.nextString(2, 'hex');\n  frame.options = reader.nextUInt8();\n  frame.data = reader.nextAll();\n};\n\nframe_parser.parseNodeIdentificationPayload = function(frame, reader, options) {\n  frame.remote16 = reader.nextString(2, 'hex');\n  frame.remote64 = reader.nextString(8, 'hex');\n\n  // Extract the NI string from the buffer\n  frame.nodeIdentifier = reader.nextStringZero('ascii');\n\n  if(reader.buf.length > reader.tell()) {\n    frame.remoteParent16 = reader.nextString(2, 'hex');\n    frame.deviceType = reader.nextUInt8();\n    frame.sourceEvent = reader.nextUInt8();\n    frame.digiProfileID = reader.nextString(2, 'hex');\n    frame.digiManufacturerID = reader.nextString(2, 'hex');\n  }\n};\n\nframe_parser.ParseIOSamplePayload = function(frame, reader, options) {\n  frame.digitalSamples = {};\n  frame.analogSamples = {};\n  frame.numSamples = 0;\n  // When parsing responses to ATIS, there is no data to parse if IO lines are not enabled\n  if (frame.commandStatus !== undefined && frame.commandStatus !== 0) return;\n  frame.numSamples = reader.nextUInt8();\n  var mskD = reader.nextUInt16BE(); \n  var mskA = reader.nextUInt8();\n\n  if (mskD > 0) {\n    var valD = reader.nextUInt16BE();\n    for (var dbit in C.DIGITAL_CHANNELS.MASK) {\n      if ((mskD & (1 << dbit)) >> dbit) {\n        frame.digitalSamples[C.DIGITAL_CHANNELS.MASK[dbit][0]] = (valD & (1 << dbit)) >> dbit;\n      }\n    }\n  }\n\n  if (mskA > 0) {\n    for (var abit in C.ANALOG_CHANNELS.MASK) {\n      if ((mskA & (1 << abit)) >> abit) {\n        var valA = reader.nextUInt16BE();\n        \n        if (!options.convert_adc) {\n          frame.analogSamples[C.ANALOG_CHANNELS.MASK[abit][0]] = valA;\n        } else {\n        // Convert to mV, resolution is < 1mV, so rounding is OK\n          frame.analogSamples[C.ANALOG_CHANNELS.MASK[abit][0]] = Math.round((valA * options.vref_adc) / 1023);\n        }\n      }\n    }\n  }\n};\n\n// Series 1 Support\nframe_parser.Recieved16BitPacketIO = function(frame, reader, options) {\n  var hasDigital = 0;\n  var data = {};\n  // OFFSET 4\n //reader.move(4);\n  data.sampleQuantity = reader.nextUInt8();\n  data.channelMask    = reader.nextUInt16BE(); \n  data.channels       = {};\n  data.analogSamples  = [];\n  data.digitalSamples = [];\n\n  //analog channels\n  for( var a=0; a<=5; a++ ){\n    // exponent looks odd here because analog pins start at 0000001000000000\n    if( Boolean(data.channelMask & Math.pow(2,a+9)) ){\n      data.channels['ADC'+a] = 1;\n    }\n  }\n\n  // if any of the DIO pins are active, parse the digital samples \n  // 0x1ff = 0000000111111111\n  if(data.channelMask & 0x1ff){\n    hasDigital = 1;\n    for( var i=0; i < data.sampleQuantity; i++ ){\n      data.digitalSamples.push( reader.nextUInt16BE().toString(2) );\n    }\n\n    //digital channels\n    for( var d=0; d<=8; d++ ){\n      if( Boolean(data.channelMask & Math.pow(2,d)) ){\n        data.channels['DIO'+d] = 1;\n      }\n    }\n  }\n\n  for( var si=0; si < data.sampleQuantity; si++ ){\n    var sample = {};\n    for( var j=0; j <= 5; j++ ){\n      if( data.channels['ADC'+j] ){\n        // starts at the 7th byte and moved down by the Digital Samples section\n        sample['ADC'+j] = reader.nextUInt16BE();\n      }\n    }\n    data.analogSamples.push(sample);\n  }\n\n  frame.data = data;\n};\n\nframe_parser[C.FRAME_TYPE.TX_STATUS] = function(frame, reader, options) {\n  frame.id = reader.nextUInt8();\n  frame.deliveryStatus = reader.nextUInt8();\n};\n\nframe_parser[C.FRAME_TYPE.RX_PACKET_64] = function(frame, reader, options) {\n  frame.remote64 = reader.nextString(8, 'hex');\n  frame.rssi = reader.nextUInt8();\n  frame.receiveOptions = reader.nextUInt8();\n  frame.data = reader.nextAll();\n};\n\nframe_parser[C.FRAME_TYPE.RX_PACKET_16] = function(frame, reader, options) {\n  frame.remote16 = reader.nextString(2, 'hex');\n  frame.rssi = reader.nextUInt8();\n  frame.receiveOptions = reader.nextUInt8();\n  frame.data = reader.nextAll();\n};\n\nframe_parser[C.FRAME_TYPE.RX_PACKET_64_IO] = function(frame, reader, options) {\n  frame.remote64 = reader.nextString(8, 'hex');\n  frame.rssi = reader.nextUInt8();\n  frame.receiveOptions = reader.nextUInt8();\n  frame.data = reader.nextAll();\n  // TODO: Parse I/O Data?\n};\n\n\nframe_parser[C.FRAME_TYPE.RX_PACKET_16_IO] = function(frame, reader, options) {\n  frame.remote16 = reader.nextString(2, 'hex');\n  frame.rssi = reader.nextUInt8();\n  frame.receiveOptions = reader.nextUInt8();\n  frame_parser.Recieved16BitPacketIO(frame, reader, options);\n};\n","/home/travis/build/npmtest/node-npmtest-xbee-api/node_modules/xbee-api/lib/frame-builder.js":"/*\n * xbee-api\n * https://github.com/jouz/xbee-api\n *\n * Copyright (c) 2013 Jan Kolkmeier\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar assert = require('assert'),\n    C = require('./constants'),\n    Buffer = require('safe-buffer').Buffer;\n\nvar frame_builder = module.exports = {\n  frameId: 0,\n  nextFrameId: function nextFrameId() {\n    this.frameId = this.frameId >= 0xff ? 1 : ++this.frameId;\n    return this.frameId;\n  },\n\n  getFrameId: function getFrameId(frame) {\n    assert(frame, 'Frame parameter must be supplied');\n    var id = frame.id || (frame.id !== 0 && this.nextFrameId()) || frame.id;\n    return frame.id = id;\n  }\n};\n\n\n// Appends data provided as Array, String, or Buffer\nfunction appendData(data, builder) {\n  if(Array.isArray(data) || Buffer.isBuffer(data)) {\n    data = Buffer.from(data);\n  } else {\n    data = Buffer.from(data, 'ascii');\n  }\n\n  builder.appendBuffer(data);\n}\n\nframe_builder[C.FRAME_TYPE.AT_COMMAND] = \nframe_builder[C.FRAME_TYPE.AT_COMMAND_QUEUE_PARAMETER_VALUE] = function(frame, builder) {\n  builder.appendUInt8(frame.type);\n  builder.appendUInt8(this.getFrameId(frame));\n  builder.appendString(frame.command, 'ascii');\n  appendData(frame.commandParameter, builder);\n};\n\nframe_builder[C.FRAME_TYPE.REMOTE_AT_COMMAND_REQUEST] = function(frame, builder) {\n  builder.appendUInt8(frame.type);\n  builder.appendUInt8(this.getFrameId(frame));\n  builder.appendString(frame.destination64 || C.UNKNOWN_64, 'hex');\n  builder.appendString(frame.destination16 || C.UNKNOWN_16, 'hex');\n  builder.appendUInt8(frame.remoteCommandOptions || 0x02);\n  builder.appendString(frame.command, 'ascii');\n  appendData(frame.commandParameter, builder);\n};\n\nframe_builder[C.FRAME_TYPE.ZIGBEE_TRANSMIT_REQUEST] = function(frame, builder) {\n  builder.appendUInt8(frame.type);\n  builder.appendUInt8(this.getFrameId(frame));\n  builder.appendString(frame.destination64 || C.UNKNOWN_64, 'hex');\n  builder.appendString(frame.destination16 || C.UNKNOWN_16, 'hex');\n  builder.appendUInt8(frame.broadcastRadius || 0x00);\n  builder.appendUInt8(frame.options || 0x00);\n  appendData(frame.data, builder);\n};\n\n\nframe_builder[C.FRAME_TYPE.EXPLICIT_ADDRESSING_ZIGBEE_COMMAND_FRAME] = function(frame, builder) {\n  builder.appendUInt8(frame.type);\n  builder.appendUInt8(this.getFrameId(frame));\n  builder.appendString(frame.destination64 || C.UNKNOWN_64, 'hex');\n  builder.appendString(frame.destination16 || C.UNKNOWN_16, 'hex');\n  builder.appendUInt8(frame.sourceEndpoint);\n  builder.appendUInt8(frame.destinationEndpoint);\n\n  if (typeof(frame.clusterId) === 'number') {\n\t  builder.appendUInt16BE(frame.clusterId, 'hex');\n  } else {\n\t  builder.appendString(frame.clusterId, 'hex');\n  }\n\n  if (typeof(frame.profileId) === 'number') {\n\t  builder.appendUInt16BE(frame.profileId, 'hex');\n  } else {\n\t  builder.appendString(frame.profileId, 'hex');\n  }\n\n  builder.appendUInt8(frame.broadcastRadius || 0x00);\n  builder.appendUInt8(frame.options || 0x00);\n  appendData(frame.data, builder);\n};\n\nframe_builder[C.FRAME_TYPE.CREATE_SOURCE_ROUTE] = function(frame, builder) {\n  builder.appendUInt8(frame.type);\n  builder.appendUInt8(0); // Frame ID is always zero for this\n  builder.appendString(frame.destination64, 'hex');\n  builder.appendString(frame.destination16, 'hex');\n  builder.appendUInt8(0); // Route command options always zero\n  builder.appendUInt8(frame.addresses.length); // Number of hops\n  for (var i = 0; i < frame.addresses.length; i++) {\n    builder.appendUInt16BE(frame.addresses[i], 'hex');\n  }\n};\n\nframe_builder[C.FRAME_TYPE.TX_REQUEST_64] = function(frame, builder) {\n  builder.appendUInt8(frame.type);\n  builder.appendUInt8(this.getFrameId(frame));\n  builder.appendString(frame.destination64 || C.UNKNOWN_64, 'hex');\n  builder.appendUInt8(frame.options || 0x00);\n  appendData(frame.data, builder);\n};\n\nframe_builder[C.FRAME_TYPE.TX_REQUEST_16] = function(frame, builder) {\n  builder.appendUInt8(frame.type);\n  builder.appendUInt8(this.getFrameId(frame));\n  builder.appendString(frame.destination16 || C.BROADCAST_16_XB, 'hex');\n  builder.appendUInt8(frame.options || 0x00);\n  appendData(frame.data, builder);\n};\n","/home/travis/build/npmtest/node-npmtest-xbee-api/node_modules/xbee-api/Gruntfile.js":"'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    browserify: {\n      lib: {\n        src: ['lib/xbee-api.js'],\n        dest: 'examples/chrome-tool/js/dist/xbee.js',\n        options: {\n          alias:'lib/xbee-api.js:xbee-api'\n        }\n      },\n      src: {\n        src: ['examples/chrome-tool/js/src/app.js'],\n        dest: 'examples/chrome-tool/js/dist/main.js',\n        options: {\n          external: [ 'xbee-api' ]\n        }\n      }\n    },\n    nodeunit: {\n      files: ['test/**/*_test.js'],\n    },\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc'\n      },\n      gruntfile: {\n        src: 'Gruntfile.js'\n      },\n      lib: {\n        src: ['lib/**/*.js']\n      },\n      test: {\n        src: ['test/**/*.js']\n      },\n    },\n    watch: {\n      gruntfile: {\n        files: '<%= jshint.gruntfile.src %>',\n        tasks: ['jshint:gruntfile']\n      },\n      lib: {\n        files: '<%= jshint.lib.src %>',\n        tasks: ['jshint:lib', 'nodeunit']\n      },\n      test: {\n        files: '<%= jshint.test.src %>',\n        tasks: ['jshint:test', 'nodeunit']\n      },\n    },\n  });\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-browserify');\n\n  // Default task.\n  grunt.registerTask('chrome-example', ['browserify:lib', 'browserify:src' ]);\n  grunt.registerTask('default', ['jshint', 'nodeunit', 'chrome-example']);\n\n};\n"}